import {
  require_jsx_runtime
} from "./chunk-MJNCUEZK.js";
import {
  require_react
} from "./chunk-UGC3UZ7L.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@shinyongjun/react-fullpage/dist/esm/components/FullpageContainer.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_react4 = __toESM(require_react());

// node_modules/@shinyongjun/react-fullpage/dist/esm/hooks/usePrevious.js
var import_react = __toESM(require_react());
function usePrevious(value) {
  var ref = (0, import_react.useRef)();
  (0, import_react.useEffect)(function() {
    ref.current = value;
  }, [value]);
  return ref.current;
}
var usePrevious_default = usePrevious;

// node_modules/@shinyongjun/react-fullpage/dist/esm/hooks/useWindowSize.js
var import_react2 = __toESM(require_react());
function useWindowSize() {
  var isClient = typeof window === "object";
  var _a = (0, import_react2.useState)({
    width: isClient ? window.innerWidth : 0,
    height: isClient ? window.innerHeight : 0
  }), windowSize = _a[0], setWindowSize = _a[1];
  (0, import_react2.useEffect)(function() {
    function handleResize() {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight
      });
    }
    window.addEventListener("resize", handleResize);
    return function() {
      window.removeEventListener("resize", handleResize);
    };
  }, [isClient]);
  return windowSize;
}

// node_modules/@shinyongjun/react-fullpage/dist/esm/components/FullpageWrapper.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react3 = __toESM(require_react());
var FullpageWrapper = function(_a) {
  var children = _a.children;
  var wrapper = (0, import_react3.useRef)(null);
  var _b = (0, import_react3.useState)([]), parentsNode = _b[0], setParentsNode = _b[1];
  var temp = [];
  var initParentsClassName = (0, import_react3.useCallback)(function(target) {
    if (target) {
      var parentNode = target.parentNode;
      if (parentNode && parentNode.classList) {
        temp.push(parentNode);
        initParentsClassName(parentNode);
      } else {
        setParentsNode(temp);
      }
    }
  }, []);
  (0, import_react3.useEffect)(function() {
    var wrapperCurrent = wrapper.current;
    if (wrapperCurrent) {
      initParentsClassName(wrapperCurrent);
    }
    if (parentsNode.length) {
      parentsNode.forEach(function(node) {
        node.classList.add("react-fullpage__parents");
      });
    }
    return function() {
      parentsNode.forEach(function(node) {
        node.classList.remove("react-fullpage__parents");
      });
    };
  }, [initParentsClassName, parentsNode]);
  return (0, import_jsx_runtime.jsx)("div", { className: "react-fullpage__wrapper", ref: wrapper, children });
};
var FullpageWrapper_default = FullpageWrapper;

// node_modules/@shinyongjun/react-fullpage/dist/esm/components/FullpageContainer.js
function FullpageContainer(_a) {
  var children = _a.children, activeIndex = _a.activeIndex, _b = _a.allowScroll, allowScroll = _b === void 0 ? true : _b, _c = _a.allowScrollUp, allowScrollUp = _c === void 0 ? true : _c, _d = _a.allowScrollDown, allowScrollDown = _d === void 0 ? true : _d, _e = _a.transitionDuration, transitionDuration = _e === void 0 ? 700 : _e, setActiveIndex = _a.setActiveIndex, onBeforeChange = _a.onBeforeChange, onAfterChange = _a.onAfterChange, onAfterLoad = _a.onAfterLoad, _f = _a.topScrollOnChange, topScrollOnChange = _f === void 0 ? false : _f;
  var _g = (0, import_react4.useState)(0), transformY = _g[0], setTransformY = _g[1];
  var container = (0, import_react4.useRef)(null);
  var _h = (0, import_react4.useState)(false), isAnimating = _h[0], setIsAnimating = _h[1];
  var prevActiveIndex = usePrevious_default(activeIndex);
  var _j = (0, import_react4.useState)(0), sectionCount = _j[0], setSectionCount = _j[1];
  var _k = (0, import_react4.useState)(false), isLoaded = _k[0], setIsLoaded = _k[1];
  var _l = useWindowSize(), windowWidth = _l.width, windowHeight = _l.height;
  var callbackBeforeChange = (0, import_react4.useCallback)(function() {
    if (onBeforeChange) {
      onBeforeChange(prevActiveIndex, activeIndex);
    }
  }, [onBeforeChange, activeIndex]);
  var callbackAfterChange = (0, import_react4.useCallback)(function() {
    if (onAfterChange) {
      onAfterChange(prevActiveIndex, activeIndex);
    }
  }, [onAfterChange, activeIndex]);
  (0, import_react4.useEffect)(function() {
    callbackBeforeChange();
    var timer = setTimeout(function() {
      setIsAnimating(false);
      callbackAfterChange();
    }, transitionDuration);
    return function() {
      return clearTimeout(timer);
    };
  }, [activeIndex, callbackBeforeChange, callbackAfterChange]);
  (0, import_react4.useEffect)(function() {
    var temp = 0;
    if (activeIndex < 0)
      setActiveIndex(0);
    if (sectionCount && activeIndex > sectionCount - 1)
      setActiveIndex(sectionCount - 1);
    for (var i = 0; i <= activeIndex; i += 1) {
      if (container !== null && container.current) {
        var node = container.current.children[i];
        if (node && i > 0) {
          temp += node.clientHeight || 0;
        }
      }
    }
    setTransformY(temp);
  }, [
    windowWidth,
    windowHeight,
    activeIndex,
    setActiveIndex,
    container,
    isLoaded,
    sectionCount
  ]);
  (0, import_react4.useEffect)(function() {
    if (container !== null && container.current) {
      setSectionCount(container.current.childElementCount);
    }
  }, [container, isLoaded]);
  (0, import_react4.useEffect)(function() {
    if (isLoaded && onAfterLoad) {
      onAfterLoad(container);
    }
  }, [isLoaded]);
  (0, import_react4.useEffect)(function() {
    setIsLoaded(true);
    return function() {
      setIsLoaded(false);
    };
  }, []);
  return (0, import_jsx_runtime2.jsx)(FullpageWrapper_default, { children: (0, import_jsx_runtime2.jsx)("div", { className: "react-fullpage__container", style: {
    transform: "translate3d(0px, -".concat(transformY, "px, 0px)"),
    transitionDuration: "".concat(transitionDuration, "ms")
  }, ref: container, "data-is-animating": isAnimating, children: isLoaded && import_react4.Children.map(children, function(child, index) {
    var item = child;
    return (0, import_react4.cloneElement)(item, {
      index,
      activeIndex,
      setActiveIndex,
      sectionCount,
      isAnimating,
      setIsAnimating,
      allowScroll,
      allowScrollUp,
      allowScrollDown,
      topScrollOnChange,
      transitionDuration
    });
  }) }) });
}
var FullpageContainer_default = FullpageContainer;

// node_modules/@shinyongjun/react-fullpage/dist/esm/components/FullpageSection.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var import_react12 = __toESM(require_react());

// node_modules/@shinyongjun/react-fullpage/dist/esm/hooks/useElementScroll.js
var import_react5 = __toESM(require_react());
function useElementScroll(elementRef, contentsHeight) {
  var _a = (0, import_react5.useState)({
    scrollX: 0,
    scrollY: 0,
    isAtTop: true,
    isAtBottom: false,
    hasScrollbar: false
  }), scrollPosition = _a[0], setScrollPosition = _a[1];
  var windowHeight = useWindowSize().height;
  (0, import_react5.useEffect)(function() {
    var targetElement = elementRef.current;
    if (!targetElement)
      return;
    function handleScroll() {
      var scrollTop = targetElement ? targetElement.scrollTop : 0;
      var isAtTop = scrollTop <= 0;
      var clientHeight = targetElement ? targetElement.clientHeight : 0;
      var isAtBottom = contentsHeight - scrollTop <= clientHeight + 1;
      var hasScrollbar = contentsHeight > clientHeight;
      setScrollPosition({
        scrollX: (targetElement === null || targetElement === void 0 ? void 0 : targetElement.scrollLeft) || 0,
        scrollY: (targetElement === null || targetElement === void 0 ? void 0 : targetElement.scrollTop) || 0,
        isAtTop,
        isAtBottom,
        hasScrollbar
      });
    }
    handleScroll();
    targetElement.addEventListener("scroll", handleScroll);
    return function() {
      if (targetElement) {
        targetElement.removeEventListener("scroll", handleScroll);
      }
    };
  }, [elementRef, contentsHeight, windowHeight]);
  return scrollPosition;
}

// node_modules/@shinyongjun/react-fullpage/dist/esm/hooks/useElementSize.js
var import_react6 = __toESM(require_react());
function useElementSize(elementRef) {
  var _a = (0, import_react6.useState)(0), width = _a[0], setWidth = _a[1];
  var _b = (0, import_react6.useState)(0), height = _b[0], setHeight = _b[1];
  (0, import_react6.useEffect)(function() {
    var targetElement = elementRef.current;
    if (!targetElement)
      return;
    var setElementSize = function() {
      var targetWidth = targetElement ? targetElement.clientWidth : 0;
      var targetHeight = targetElement ? targetElement.clientHeight : 0;
      setWidth(targetWidth);
      setHeight(targetHeight);
    };
    var resizeObserver = new ResizeObserver(function() {
      setElementSize();
    });
    setElementSize();
    resizeObserver.observe(targetElement);
    return function() {
      return resizeObserver.disconnect();
    };
  }, [elementRef]);
  return { width, height };
}

// node_modules/@shinyongjun/react-fullpage/dist/esm/hooks/useHash.js
var import_react7 = __toESM(require_react());
function useHash() {
  var _a = (0, import_react7.useState)(""), hashValue = _a[0], setHashValue = _a[1];
  (0, import_react7.useEffect)(function() {
    var handleHashChange = function() {
      var newHashValue = window.location.hash.substring(1);
      setHashValue(newHashValue);
    };
    handleHashChange();
    window.addEventListener("hashchange", handleHashChange);
    return function() {
      window.removeEventListener("hashchange", handleHashChange);
    };
  }, []);
  var updateHash = function(newHashValue) {
    if (newHashValue) {
      window.location.hash = newHashValue;
      setHashValue(newHashValue);
    } else {
      window.history.replaceState(null, document.title, window.location.pathname);
      setHashValue("");
    }
  };
  return { hashValue, updateHash };
}
var useHash_default = useHash;

// node_modules/@shinyongjun/react-fullpage/dist/esm/hooks/useSwipe.js
var import_react8 = __toESM(require_react());
var SWIPE_THRESHOLD = 30;
var calculateDirection = function(x, y) {
  var angle = Math.atan2(y, x) * (180 / Math.PI);
  if (angle >= -45 && angle <= 45) {
    return "RIGHT";
  }
  if (angle >= 45 && angle <= 135) {
    return "DOWN";
  }
  if (angle >= -135 && angle <= -45) {
    return "UP";
  }
  return "LEFT";
};
var useSwipe = function(ref, _a) {
  var onSwipeStart = _a.onSwipeStart, onSwipeEnd = _a.onSwipeEnd;
  (0, import_react8.useEffect)(function() {
    var startX;
    var startY;
    var endX;
    var endY;
    var isSwiping = false;
    var handleTouchStart = function(event) {
      if (!ref.current || !event.touches[0])
        return;
      startX = event.touches[0].clientX;
      startY = event.touches[0].clientY;
      isSwiping = true;
      if (onSwipeStart) {
        onSwipeStart();
      }
    };
    var handleTouchMove = function(event) {
      if (!isSwiping || !ref.current || !event.touches[0])
        return;
      endX = event.touches[0].clientX;
      endY = event.touches[0].clientY;
      var deltaX = endX - startX;
      var deltaY = endY - startY;
      if (Math.abs(deltaX) > SWIPE_THRESHOLD || Math.abs(deltaY) > SWIPE_THRESHOLD) {
        var direction = calculateDirection(deltaX, deltaY);
        if (onSwipeEnd) {
          onSwipeEnd(direction);
        }
        isSwiping = false;
      }
    };
    var handleTouchEnd = function() {
      isSwiping = false;
    };
    var element = ref.current;
    element === null || element === void 0 ? void 0 : element.addEventListener("touchstart", handleTouchStart, {
      passive: true
    });
    element === null || element === void 0 ? void 0 : element.addEventListener("touchmove", handleTouchMove, {
      passive: true
    });
    element === null || element === void 0 ? void 0 : element.addEventListener("touchend", handleTouchEnd);
    return function() {
      element === null || element === void 0 ? void 0 : element.removeEventListener("touchstart", handleTouchStart);
      element === null || element === void 0 ? void 0 : element.removeEventListener("touchmove", handleTouchMove);
      element === null || element === void 0 ? void 0 : element.removeEventListener("touchend", handleTouchEnd);
    };
  }, [ref, onSwipeStart, onSwipeEnd]);
};
var useSwipe_default = useSwipe;

// node_modules/@shinyongjun/react-fullpage/dist/esm/components/FullpageContents.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
function FullpageContents(_a) {
  var contentsRef = _a.contentsRef, children = _a.children;
  return (0, import_jsx_runtime3.jsx)("div", { className: "react-fullpage__contents", ref: contentsRef, children });
}
var FullpageContents_default = FullpageContents;

// node_modules/@shinyongjun/react-fullpage/dist/esm/components/FullpageScrollbar.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var import_react11 = __toESM(require_react());

// node_modules/@shinyongjun/react-fullpage/dist/esm/hooks/useMousePosition.js
var import_react9 = __toESM(require_react());
var useMousePosition = function() {
  var _a = (0, import_react9.useState)({
    x: 0,
    y: 0
  }), mousePosition = _a[0], setMousePosition = _a[1];
  var handleMouseMove = function(event) {
    setMousePosition({ x: event.clientX, y: event.clientY });
  };
  (0, import_react9.useEffect)(function() {
    document.addEventListener("mousemove", handleMouseMove);
    return function() {
      document.removeEventListener("mousemove", handleMouseMove);
    };
  }, []);
  return mousePosition;
};
var useMousePosition_default = useMousePosition;

// node_modules/@shinyongjun/react-fullpage/dist/esm/hooks/useMousePressed.js
var import_react10 = __toESM(require_react());
var useMousePressed = function(targetRef) {
  var _a = (0, import_react10.useState)(false), isMousePressed = _a[0], setIsMousePressed = _a[1];
  var handleMouseDown = function() {
    setIsMousePressed(true);
  };
  var handleMouseUp = function() {
    setIsMousePressed(false);
  };
  (0, import_react10.useEffect)(function() {
    var targetElement = "current" in targetRef ? targetRef.current : targetRef;
    if (!targetElement)
      return;
    targetElement.addEventListener("mousedown", handleMouseDown);
    document.addEventListener("mouseup", handleMouseUp);
    return function() {
      targetElement.removeEventListener("mousedown", handleMouseDown);
      document.removeEventListener("mouseup", handleMouseUp);
    };
  }, [targetRef]);
  return isMousePressed;
};
var useMousePressed_default = useMousePressed;

// node_modules/@shinyongjun/react-fullpage/dist/esm/components/FullpageScrollbar.js
function FullpageScrollbar(_a) {
  var contentsHeight = _a.contentsHeight, scrollY = _a.scrollY, sectionRef = _a.sectionRef;
  var handler = (0, import_react11.useRef)(null);
  var mouseY = useMousePosition_default().y;
  var isMousePressed = useMousePressed_default(handler);
  var _b = (0, import_react11.useState)(0), handlerHeight = _b[0], setHandlerHeight = _b[1];
  var _c = (0, import_react11.useState)(0), handlerTop = _c[0], setHandlerTop = _c[1];
  var _d = useWindowSize(), windowWidth = _d.width, windowHeight = _d.height;
  var _e = (0, import_react11.useState)(0), pressMouseY = _e[0], setPressMouseY = _e[1];
  var _f = (0, import_react11.useState)(0), pressScrollY = _f[0], setPressScrollY = _f[1];
  (0, import_react11.useEffect)(function() {
    setHandlerTop((100 - windowHeight / contentsHeight * 100) * (scrollY / (contentsHeight - windowHeight)));
    setHandlerHeight(windowHeight / contentsHeight * 100);
  }, [windowHeight, contentsHeight, scrollY]);
  (0, import_react11.useEffect)(function() {
    if (isMousePressed) {
      setPressMouseY(mouseY);
      setPressScrollY(scrollY);
    } else {
    }
  }, [isMousePressed]);
  (0, import_react11.useEffect)(function() {
    if (isMousePressed) {
      var newScrollY = (mouseY - pressMouseY) / windowHeight * contentsHeight + pressScrollY;
      if (sectionRef.current) {
        sectionRef.current.scrollTo(0, newScrollY);
      }
    }
  }, [
    mouseY,
    pressMouseY,
    windowWidth,
    windowHeight,
    contentsHeight,
    pressScrollY,
    isMousePressed,
    sectionRef
  ]);
  return (0, import_jsx_runtime4.jsx)("div", { className: "react-fullpage__scrollbar", style: { height: "".concat(contentsHeight, "px") }, children: (0, import_jsx_runtime4.jsx)("div", { className: "react-fullpage__scrollbar-sticker", style: { height: "".concat(windowHeight, "px") }, children: (0, import_jsx_runtime4.jsx)("div", { className: "react-fullpage__scrollbar-container", style: { height: "".concat(windowHeight, "px") }, children: (0, import_jsx_runtime4.jsx)("button", { type: "button", ref: handler, className: "react-fullpage__scrollbar-handler ".concat(isMousePressed && "is-pressed"), style: { top: "".concat(handlerTop, "%"), height: "".concat(handlerHeight, "%") }, "data-is-pressed": isMousePressed }) }) }) });
}
var FullpageScrollbar_default = FullpageScrollbar;

// node_modules/@shinyongjun/react-fullpage/dist/esm/components/FullpageSection.js
function FullpageSection(_a) {
  var children = _a.children, allowScroll = _a.allowScroll, allowScrollUp = _a.allowScrollUp, allowScrollDown = _a.allowScrollDown, _b = _a.isAutoHeight, isAutoHeight = _b === void 0 ? false : _b, activeIndex = _a.activeIndex, sectionCount = _a.sectionCount, _c = _a.isAnimating, isAnimating = _c === void 0 ? false : _c, setActiveIndex = _a.setActiveIndex, setIsAnimating = _a.setIsAnimating, _d = _a.name, name = _d === void 0 ? "" : _d, _e = _a.index, index = _e === void 0 ? 0 : _e, topScrollOnChange = _a.topScrollOnChange, transitionDuration = _a.transitionDuration;
  var sectionRef = (0, import_react12.useRef)(null);
  var contentsRef = (0, import_react12.useRef)(null);
  var contentsHeight = useElementSize(contentsRef).height;
  var _f = useElementScroll(sectionRef, contentsHeight), isAtTop = _f.isAtTop, isAtBottom = _f.isAtBottom, hasScrollbar = _f.hasScrollbar, scrollY = _f.scrollY;
  var _g = (0, import_react12.useState)(false), scrollDelay = _g[0], setScrollDelay = _g[1];
  var hashValue = useHash_default().hashValue;
  var deltaWeightTimer = (0, import_react12.useRef)(0);
  var _h = (0, import_react12.useState)(0), deltaWeight = _h[0], setDeltaWeight = _h[1];
  var _j = (0, import_react12.useState)(0), lastDeltaWeight = _j[0], setLastDeltaWeight = _j[1];
  var wheelTokenTimer = (0, import_react12.useRef)(null);
  var wheelToken = (0, import_react12.useRef)(true);
  (0, import_react12.useEffect)(function() {
    if (hashValue) {
      if (hashValue === name) {
        if (setActiveIndex !== void 0) {
          setActiveIndex(index);
        }
      }
    }
  }, [hashValue, setActiveIndex, index, name]);
  (0, import_react12.useEffect)(function() {
    setScrollDelay(isAtTop || isAtBottom);
  }, [isAtTop, isAtBottom]);
  (0, import_react12.useEffect)(function() {
    if (scrollDelay) {
      var timer_1 = setTimeout(function() {
        setScrollDelay(false);
      }, 300);
      return function() {
        return clearTimeout(timer_1);
      };
    }
  }, [scrollDelay]);
  var moveToSection = function(newIndex) {
    if (setIsAnimating === void 0 || setActiveIndex === void 0)
      return;
    if (!allowScroll || isAnimating || scrollDelay)
      return;
    setIsAnimating(true);
    setActiveIndex(newIndex);
  };
  var moveToNextSection = function() {
    if (activeIndex === void 0 || sectionCount === void 0 || activeIndex >= sectionCount - 1 || !allowScrollDown)
      return;
    if (activeIndex === index) {
      if (hasScrollbar && !isAtBottom)
        return;
    }
    moveToSection(activeIndex + 1);
  };
  var moveToPrevSection = function() {
    if (activeIndex === void 0 || activeIndex <= 0 || !allowScrollUp)
      return;
    if (activeIndex === index) {
      if (hasScrollbar && !isAtTop)
        return;
    }
    moveToSection(activeIndex - 1);
  };
  var handelWheel = function(e) {
    var t = (/* @__PURE__ */ new Date()).getTime();
    if (t - deltaWeightTimer.current < 300) {
      var computed = deltaWeight + Math.abs(e.deltaY);
      if (computed > lastDeltaWeight) {
        wheelToken.current = true;
      }
      setDeltaWeight(computed);
    } else {
      setLastDeltaWeight(deltaWeight);
      deltaWeightTimer.current = t;
      setDeltaWeight(0);
    }
    if (!wheelToken.current)
      return;
    if (e.deltaY > 0) {
      moveToNextSection();
    }
    if (e.deltaY < 0) {
      moveToPrevSection();
    }
  };
  (0, import_react12.useEffect)(function() {
    wheelToken.current = false;
    if (wheelTokenTimer.current !== null) {
      clearTimeout(wheelTokenTimer.current);
    }
    wheelTokenTimer.current = setTimeout(function() {
      wheelToken.current = true;
      setDeltaWeight(0);
    }, 300);
  }, [deltaWeight]);
  var handleSwipeEnd = function(direction) {
    if (direction === "UP") {
      moveToNextSection();
    }
    if (direction === "DOWN") {
      moveToPrevSection();
    }
  };
  useSwipe_default(sectionRef, {
    onSwipeEnd: handleSwipeEnd
  });
  (0, import_react12.useEffect)(function() {
    if (topScrollOnChange) {
      if (activeIndex !== index) {
        setTimeout(function() {
          var _a2;
          (_a2 = sectionRef.current) === null || _a2 === void 0 ? void 0 : _a2.scrollTo(0, 0);
        }, transitionDuration);
      }
    }
  }, [activeIndex]);
  return (0, import_jsx_runtime5.jsxs)("div", { ref: sectionRef, onWheel: handelWheel, className: "react-fullpage__section", "data-active": activeIndex === index, "data-animating": isAnimating, style: {
    height: "".concat(isAutoHeight ? "auto" : "100%")
  }, children: [(0, import_jsx_runtime5.jsx)(FullpageContents_default, { contentsRef, children }), hasScrollbar && !isAnimating && (0, import_jsx_runtime5.jsx)(FullpageScrollbar_default, { contentsHeight, scrollY, sectionRef })] });
}
var FullpageSection_default = FullpageSection;
export {
  FullpageContainer_default as FullpageContainer,
  FullpageSection_default as FullpageSection
};
//# sourceMappingURL=@shinyongjun_react-fullpage.js.map
