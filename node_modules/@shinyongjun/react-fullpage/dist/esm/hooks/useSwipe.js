import { useEffect } from 'react';
var SWIPE_THRESHOLD = 30;
var calculateDirection = function (x, y) {
    var angle = Math.atan2(y, x) * (180 / Math.PI);
    if (angle >= -45 && angle <= 45) {
        return 'RIGHT';
    }
    if (angle >= 45 && angle <= 135) {
        return 'DOWN';
    }
    if (angle >= -135 && angle <= -45) {
        return 'UP';
    }
    return 'LEFT';
};
var useSwipe = function (ref, _a) {
    var onSwipeStart = _a.onSwipeStart, onSwipeEnd = _a.onSwipeEnd;
    useEffect(function () {
        var startX;
        var startY;
        var endX;
        var endY;
        var isSwiping = false;
        var handleTouchStart = function (event) {
            if (!ref.current || !event.touches[0])
                return;
            startX = event.touches[0].clientX;
            startY = event.touches[0].clientY;
            isSwiping = true;
            if (onSwipeStart) {
                onSwipeStart();
            }
        };
        var handleTouchMove = function (event) {
            if (!isSwiping || !ref.current || !event.touches[0])
                return;
            endX = event.touches[0].clientX;
            endY = event.touches[0].clientY;
            var deltaX = endX - startX;
            var deltaY = endY - startY;
            if (Math.abs(deltaX) > SWIPE_THRESHOLD ||
                Math.abs(deltaY) > SWIPE_THRESHOLD) {
                var direction = calculateDirection(deltaX, deltaY);
                if (onSwipeEnd) {
                    onSwipeEnd(direction);
                }
                isSwiping = false;
            }
        };
        var handleTouchEnd = function () {
            isSwiping = false;
        };
        var element = ref.current;
        element === null || element === void 0 ? void 0 : element.addEventListener('touchstart', handleTouchStart, {
            passive: true,
        });
        element === null || element === void 0 ? void 0 : element.addEventListener('touchmove', handleTouchMove, {
            passive: true,
        });
        element === null || element === void 0 ? void 0 : element.addEventListener('touchend', handleTouchEnd);
        return function () {
            element === null || element === void 0 ? void 0 : element.removeEventListener('touchstart', handleTouchStart);
            element === null || element === void 0 ? void 0 : element.removeEventListener('touchmove', handleTouchMove);
            element === null || element === void 0 ? void 0 : element.removeEventListener('touchend', handleTouchEnd);
        };
    }, [ref, onSwipeStart, onSwipeEnd]);
};
export default useSwipe;
//# sourceMappingURL=useSwipe.js.map