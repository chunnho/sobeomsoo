"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var useWindowSize_1 = __importDefault(require("./useWindowSize"));
function useElementScroll(elementRef, contentsHeight) {
    var _a = (0, react_1.useState)({
        scrollX: 0,
        scrollY: 0,
        isAtTop: true,
        isAtBottom: false,
        hasScrollbar: false,
    }), scrollPosition = _a[0], setScrollPosition = _a[1];
    var windowHeight = (0, useWindowSize_1.default)().height;
    (0, react_1.useEffect)(function () {
        var targetElement = elementRef.current;
        if (!targetElement)
            return;
        function handleScroll() {
            var scrollTop = targetElement ? targetElement.scrollTop : 0;
            var isAtTop = scrollTop <= 0;
            var clientHeight = targetElement ? targetElement.clientHeight : 0;
            var isAtBottom = contentsHeight - scrollTop <= clientHeight + 1;
            var hasScrollbar = contentsHeight > clientHeight;
            setScrollPosition({
                scrollX: (targetElement === null || targetElement === void 0 ? void 0 : targetElement.scrollLeft) || 0,
                scrollY: (targetElement === null || targetElement === void 0 ? void 0 : targetElement.scrollTop) || 0,
                isAtTop: isAtTop,
                isAtBottom: isAtBottom,
                hasScrollbar: hasScrollbar,
            });
        }
        handleScroll();
        targetElement.addEventListener('scroll', handleScroll);
        return function () {
            if (targetElement) {
                targetElement.removeEventListener('scroll', handleScroll);
            }
        };
    }, [elementRef, contentsHeight, windowHeight]);
    return scrollPosition;
}
exports.default = useElementScroll;
//# sourceMappingURL=useElementScroll.js.map