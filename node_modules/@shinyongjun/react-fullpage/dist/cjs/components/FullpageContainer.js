"use strict";
'use client';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var usePrevious_1 = __importDefault(require("../hooks/usePrevious"));
var useWindowSize_1 = __importDefault(require("../hooks/useWindowSize"));
var FullpageWrapper_1 = __importDefault(require("./FullpageWrapper"));
function FullpageContainer(_a) {
    var children = _a.children, activeIndex = _a.activeIndex, _b = _a.allowScroll, allowScroll = _b === void 0 ? true : _b, _c = _a.allowScrollUp, allowScrollUp = _c === void 0 ? true : _c, _d = _a.allowScrollDown, allowScrollDown = _d === void 0 ? true : _d, _e = _a.transitionDuration, transitionDuration = _e === void 0 ? 700 : _e, setActiveIndex = _a.setActiveIndex, onBeforeChange = _a.onBeforeChange, onAfterChange = _a.onAfterChange, onAfterLoad = _a.onAfterLoad, _f = _a.topScrollOnChange, topScrollOnChange = _f === void 0 ? false : _f;
    var _g = (0, react_1.useState)(0), transformY = _g[0], setTransformY = _g[1];
    var container = (0, react_1.useRef)(null);
    var _h = (0, react_1.useState)(false), isAnimating = _h[0], setIsAnimating = _h[1]; // true 시 animation 진행 중
    var prevActiveIndex = (0, usePrevious_1.default)(activeIndex); // 직전 activeIndex 값
    var _j = (0, react_1.useState)(0), sectionCount = _j[0], setSectionCount = _j[1]; // section 총 갯수
    var _k = (0, react_1.useState)(false), isLoaded = _k[0], setIsLoaded = _k[1];
    var _l = (0, useWindowSize_1.default)(), windowWidth = _l.width, windowHeight = _l.height;
    var callbackBeforeChange = (0, react_1.useCallback)(function () {
        if (onBeforeChange) {
            onBeforeChange(prevActiveIndex, activeIndex);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [onBeforeChange, activeIndex]);
    var callbackAfterChange = (0, react_1.useCallback)(function () {
        if (onAfterChange) {
            onAfterChange(prevActiveIndex, activeIndex);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [onAfterChange, activeIndex]);
    (0, react_1.useEffect)(function () {
        callbackBeforeChange();
        var timer = setTimeout(function () {
            setIsAnimating(false);
            callbackAfterChange();
        }, transitionDuration);
        return function () { return clearTimeout(timer); };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [activeIndex, callbackBeforeChange, callbackAfterChange]);
    /**
     * activeIndex 변경 시 container의 transformY 값을 계산합니다.
     */
    (0, react_1.useEffect)(function () {
        var temp = 0;
        if (activeIndex < 0)
            setActiveIndex(0);
        if (sectionCount && activeIndex > sectionCount - 1)
            setActiveIndex(sectionCount - 1);
        for (var i = 0; i <= activeIndex; i += 1) {
            if (container !== null && container.current) {
                var node = container.current.children[i];
                if (node && i > 0) {
                    temp += node.clientHeight || 0;
                }
            }
        }
        setTransformY(temp);
    }, [
        windowWidth,
        windowHeight,
        activeIndex,
        setActiveIndex,
        container,
        isLoaded,
        sectionCount,
    ]);
    (0, react_1.useEffect)(function () {
        if (container !== null && container.current) {
            setSectionCount(container.current.childElementCount);
        }
    }, [container, isLoaded]);
    (0, react_1.useEffect)(function () {
        if (isLoaded && onAfterLoad) {
            onAfterLoad(container);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [isLoaded]);
    /**
     * Container 마운트에 <html> 태그에 Class를 추가하고, 언마운트에 제거합니다.
     */
    (0, react_1.useEffect)(function () {
        // document.documentElement.classList.add('react-fullpage__html');
        setIsLoaded(true);
        return function () {
            // document.documentElement.classList.remove('react-fullpage__html');
            setIsLoaded(false);
        };
    }, []);
    return ((0, jsx_runtime_1.jsx)(FullpageWrapper_1.default, { children: (0, jsx_runtime_1.jsx)("div", { className: "react-fullpage__container", style: {
                transform: "translate3d(0px, -".concat(transformY, "px, 0px)"),
                transitionDuration: "".concat(transitionDuration, "ms"),
            }, ref: container, "data-is-animating": isAnimating, children: isLoaded &&
                react_1.Children.map(children, function (child, index) {
                    var item = child;
                    return (0, react_1.cloneElement)(item, {
                        index: index,
                        activeIndex: activeIndex,
                        setActiveIndex: setActiveIndex,
                        sectionCount: sectionCount,
                        isAnimating: isAnimating,
                        setIsAnimating: setIsAnimating,
                        allowScroll: allowScroll,
                        allowScrollUp: allowScrollUp,
                        allowScrollDown: allowScrollDown,
                        topScrollOnChange: topScrollOnChange,
                        transitionDuration: transitionDuration,
                    });
                }) }) }));
}
exports.default = FullpageContainer;
//# sourceMappingURL=FullpageContainer.js.map