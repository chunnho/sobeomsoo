"use strict";
'use client';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var useElementScroll_1 = __importDefault(require("../hooks/useElementScroll"));
var useElementSize_1 = __importDefault(require("../hooks/useElementSize"));
var useHash_1 = __importDefault(require("../hooks/useHash"));
var useSwipe_1 = __importDefault(require("../hooks/useSwipe"));
var FullpageContents_1 = __importDefault(require("./FullpageContents"));
var FullpageScrollbar_1 = __importDefault(require("./FullpageScrollbar"));
function FullpageSection(_a) {
    var children = _a.children, allowScroll = _a.allowScroll, allowScrollUp = _a.allowScrollUp, allowScrollDown = _a.allowScrollDown, _b = _a.isAutoHeight, isAutoHeight = _b === void 0 ? false : _b, activeIndex = _a.activeIndex, sectionCount = _a.sectionCount, _c = _a.isAnimating, isAnimating = _c === void 0 ? false : _c, setActiveIndex = _a.setActiveIndex, setIsAnimating = _a.setIsAnimating, _d = _a.name, name = _d === void 0 ? '' : _d, _e = _a.index, index = _e === void 0 ? 0 : _e, topScrollOnChange = _a.topScrollOnChange, transitionDuration = _a.transitionDuration;
    var sectionRef = (0, react_1.useRef)(null);
    var contentsRef = (0, react_1.useRef)(null);
    var contentsHeight = (0, useElementSize_1.default)(contentsRef).height;
    var _f = (0, useElementScroll_1.default)(sectionRef, contentsHeight), isAtTop = _f.isAtTop, isAtBottom = _f.isAtBottom, hasScrollbar = _f.hasScrollbar, scrollY = _f.scrollY;
    var _g = (0, react_1.useState)(false), scrollDelay = _g[0], setScrollDelay = _g[1];
    var hashValue = (0, useHash_1.default)().hashValue;
    var deltaWeightTimer = (0, react_1.useRef)(0);
    var _h = (0, react_1.useState)(0), deltaWeight = _h[0], setDeltaWeight = _h[1]; // wheel 가중치
    var _j = (0, react_1.useState)(0), lastDeltaWeight = _j[0], setLastDeltaWeight = _j[1];
    // wheel 속도가 마지막 wheel 속도보다 빠르면 true 또는 wheel이벤트가 300ms 이상 없으면 true
    var wheelTokenTimer = (0, react_1.useRef)(null);
    var wheelToken = (0, react_1.useRef)(true);
    (0, react_1.useEffect)(function () {
        if (hashValue) {
            if (hashValue === name) {
                if (setActiveIndex !== undefined) {
                    setActiveIndex(index);
                }
                // updateHash();
            }
        }
    }, [hashValue, setActiveIndex, index, name]);
    (0, react_1.useEffect)(function () {
        setScrollDelay(isAtTop || isAtBottom);
    }, [isAtTop, isAtBottom]);
    (0, react_1.useEffect)(function () {
        if (scrollDelay) {
            var timer_1 = setTimeout(function () {
                setScrollDelay(false);
            }, 300);
            return function () { return clearTimeout(timer_1); };
        }
    }, [scrollDelay]);
    var moveToSection = function (newIndex) {
        if (setIsAnimating === undefined || setActiveIndex === undefined)
            return; // 타입 에러 회피용
        if (!allowScroll || isAnimating || scrollDelay)
            return;
        setIsAnimating(true);
        setActiveIndex(newIndex);
    };
    var moveToNextSection = function () {
        if (activeIndex === undefined ||
            sectionCount === undefined ||
            activeIndex >= sectionCount - 1 ||
            !allowScrollDown)
            return;
        if (activeIndex === index) {
            if (hasScrollbar && !isAtBottom)
                return;
        }
        moveToSection(activeIndex + 1);
    };
    var moveToPrevSection = function () {
        if (activeIndex === undefined || activeIndex <= 0 || !allowScrollUp)
            return;
        if (activeIndex === index) {
            if (hasScrollbar && !isAtTop)
                return;
        }
        moveToSection(activeIndex - 1);
    };
    var handelWheel = function (e) {
        var t = new Date().getTime();
        if (t - deltaWeightTimer.current < 300) {
            var computed = deltaWeight + Math.abs(e.deltaY);
            if (computed > lastDeltaWeight) {
                // wheel의 속도가 lastDeltaWeight보다 높으면 token 초기화
                wheelToken.current = true;
            }
            setDeltaWeight(computed);
        }
        else {
            setLastDeltaWeight(deltaWeight);
            deltaWeightTimer.current = t;
            setDeltaWeight(0);
        }
        // token이 false라면 스크립트 중지
        if (!wheelToken.current)
            return;
        if (e.deltaY > 0) {
            moveToNextSection();
        }
        if (e.deltaY < 0) {
            moveToPrevSection();
        }
    };
    (0, react_1.useEffect)(function () {
        wheelToken.current = false;
        if (wheelTokenTimer.current !== null) {
            clearTimeout(wheelTokenTimer.current);
        }
        wheelTokenTimer.current = setTimeout(function () {
            // wheel이벤트가 300ms동안 발생하지 않으면 token 초기화
            wheelToken.current = true;
            setDeltaWeight(0);
        }, 300);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [deltaWeight]);
    var handleSwipeEnd = function (direction) {
        if (direction === 'UP') {
            moveToNextSection();
        }
        if (direction === 'DOWN') {
            moveToPrevSection();
        }
    };
    (0, useSwipe_1.default)(sectionRef, {
        onSwipeEnd: handleSwipeEnd,
    });
    (0, react_1.useEffect)(function () {
        if (topScrollOnChange) {
            if (activeIndex !== index) {
                setTimeout(function () {
                    var _a;
                    (_a = sectionRef.current) === null || _a === void 0 ? void 0 : _a.scrollTo(0, 0);
                }, transitionDuration);
            }
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [activeIndex]);
    return ((0, jsx_runtime_1.jsxs)("div", { ref: sectionRef, onWheel: handelWheel, className: "react-fullpage__section", "data-active": activeIndex === index, "data-animating": isAnimating, style: {
            height: "".concat(isAutoHeight ? 'auto' : '100%'),
        }, children: [(0, jsx_runtime_1.jsx)(FullpageContents_1.default, { contentsRef: contentsRef, children: children }), hasScrollbar && !isAnimating && ((0, jsx_runtime_1.jsx)(FullpageScrollbar_1.default, { contentsHeight: contentsHeight, scrollY: scrollY, sectionRef: sectionRef }))] }));
}
exports.default = FullpageSection;
//# sourceMappingURL=FullpageSection.js.map