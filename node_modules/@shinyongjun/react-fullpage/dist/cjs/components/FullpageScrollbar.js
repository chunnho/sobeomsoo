"use strict";
'use client';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var useMousePosition_1 = __importDefault(require("../hooks/useMousePosition"));
var useMousePressed_1 = __importDefault(require("../hooks/useMousePressed"));
var useWindowSize_1 = __importDefault(require("../hooks/useWindowSize"));
function FullpageScrollbar(_a) {
    var contentsHeight = _a.contentsHeight, scrollY = _a.scrollY, sectionRef = _a.sectionRef;
    var handler = (0, react_1.useRef)(null);
    var mouseY = (0, useMousePosition_1.default)().y;
    var isMousePressed = (0, useMousePressed_1.default)(handler);
    var _b = (0, react_1.useState)(0), handlerHeight = _b[0], setHandlerHeight = _b[1];
    var _c = (0, react_1.useState)(0), handlerTop = _c[0], setHandlerTop = _c[1];
    var _d = (0, useWindowSize_1.default)(), windowWidth = _d.width, windowHeight = _d.height;
    var _e = (0, react_1.useState)(0), pressMouseY = _e[0], setPressMouseY = _e[1];
    var _f = (0, react_1.useState)(0), pressScrollY = _f[0], setPressScrollY = _f[1];
    (0, react_1.useEffect)(function () {
        setHandlerTop((100 - (windowHeight / contentsHeight) * 100) *
            (scrollY / (contentsHeight - windowHeight)));
        setHandlerHeight((windowHeight / contentsHeight) * 100);
    }, [windowHeight, contentsHeight, scrollY]);
    (0, react_1.useEffect)(function () {
        if (isMousePressed) {
            setPressMouseY(mouseY);
            setPressScrollY(scrollY);
        }
        else {
            // 삼성브라우저에서 인풋창에 키보드가 사라지는 현상으로 주석처리
            // window.getSelection()?.removeAllRanges();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [isMousePressed]);
    (0, react_1.useEffect)(function () {
        if (isMousePressed) {
            var newScrollY = ((mouseY - pressMouseY) / windowHeight) * contentsHeight + pressScrollY;
            if (sectionRef.current) {
                sectionRef.current.scrollTo(0, newScrollY);
            }
        }
    }, [
        mouseY,
        pressMouseY,
        windowWidth,
        windowHeight,
        contentsHeight,
        pressScrollY,
        isMousePressed,
        sectionRef,
    ]);
    return ((0, jsx_runtime_1.jsx)("div", { className: "react-fullpage__scrollbar", style: { height: "".concat(contentsHeight, "px") }, children: (0, jsx_runtime_1.jsx)("div", { className: "react-fullpage__scrollbar-sticker", style: { height: "".concat(windowHeight, "px") }, children: (0, jsx_runtime_1.jsx)("div", { className: "react-fullpage__scrollbar-container", style: { height: "".concat(windowHeight, "px") }, children: (0, jsx_runtime_1.jsx)("button", { type: "button", ref: handler, className: "react-fullpage__scrollbar-handler ".concat(isMousePressed && 'is-pressed'), style: { top: "".concat(handlerTop, "%"), height: "".concat(handlerHeight, "%") }, "data-is-pressed": isMousePressed }) }) }) }));
}
exports.default = FullpageScrollbar;
//# sourceMappingURL=FullpageScrollbar.js.map